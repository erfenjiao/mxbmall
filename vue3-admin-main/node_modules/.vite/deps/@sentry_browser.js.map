{
  "version": 3,
  "sources": ["../../@sentry/src/index.ts", "../../@sentry/src/api.ts", "../../@sentry/src/flags.ts", "../../@sentry/src/integration.ts", "../../@sentry/src/baseclient.ts", "../../@sentry/src/request.ts", "../../@sentry/src/transports/noop.ts", "../../@sentry/src/basebackend.ts", "../../@sentry/src/sdk.ts", "../../@sentry/src/transports/base.ts", "../../@sentry/src/version.ts", "../../@sentry/src/integrations/index.ts", "../../@sentry/src/integrations/functiontostring.ts", "../../@sentry/src/integrations/inboundfilters.ts", "../../src/stack-parsers.ts", "../../src/eventbuilder.ts", "../../src/transports/index.ts", "../../src/flags.ts", "../../src/transports/utils.ts", "../../src/transports/base.ts", "../../src/transports/fetch.ts", "../../src/transports/xhr.ts", "../../src/transports/new-fetch.ts", "../../src/transports/new-xhr.ts", "../../src/backend.ts", "../../src/helpers.ts", "../../src/integrations/index.ts", "../../src/integrations/globalhandlers.ts", "../../src/integrations/trycatch.ts", "../../src/integrations/breadcrumbs.ts", "../../src/integrations/linkederrors.ts", "../../src/integrations/useragent.ts", "../../src/integrations/dedupe.ts", "../../src/client.ts", "../../src/sdk.ts", "../../src/version.ts", "../../src/index.ts"],
  "sourcesContent": ["import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  const syntheticException = new Error('Sentry syntheticException');\n\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param Severity Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  const syntheticException = new Error(message);\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  return callOnHub('startTransaction', { ...context }, customSamplingContext);\n}\n", "import { DsnComponents, DsnLike, SdkMetadata } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Stores details about a Sentry SDK\n */\nexport interface APIDetails {\n  /** The DSN as passed to Sentry.init() */\n  initDsn: DsnLike;\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  metadata: SdkMetadata;\n  /** The internally used Dsn object. */\n  readonly dsn: DsnComponents;\n  /** The envelope tunnel to use. */\n  readonly tunnel?: string;\n}\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: DsnComponents;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): DsnComponents {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    return getBaseApiEndpoint(this._dsnObject);\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return getStoreEndpoint(this._dsnObject);\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  }\n}\n\n/** Initializes API Details */\nexport function initAPIDetails(dsn: DsnLike, metadata?: SdkMetadata, tunnel?: string): APIDetails {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel,\n  } as APIDetails;\n}\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents, target: 'store' | 'envelope'): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/${target}/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n  });\n}\n\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'store');\n}\n\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getStoreEndpointWithUrlEncodedAuth(dsn: DsnComponents): string {\n  return `${getStoreEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string): string {\n  return tunnel ? tunnel : `${_getEnvelopeEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nexport function getRequestHeaders(\n  dsn: DsnComponents,\n  clientName: string,\n  clientVersion: string,\n): { [key: string]: string } {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n  header.push(`sentry_client=${clientName}/${clientVersion}`);\n  header.push(`sentry_key=${dsn.publicKey}`);\n  if (dsn.pass) {\n    header.push(`sentry_secret=${dsn.pass}`);\n  }\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', '),\n  };\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n      if (dialogOptions.user.name) {\n        encodedOptions += `&name=${encodeURIComponent(dialogOptions.user.name)}`;\n      }\n      if (dialogOptions.user.email) {\n        encodedOptions += `&email=${encodeURIComponent(dialogOptions.user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n", "/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * Debug flags need to be declared in each package individually and must not be imported across package boundaries,\n * because some build tools have trouble tree-shaking imported guards.\n *\n * As a convention, we define debug flags in a `flags.ts` file in the root of a package's `src` folder.\n *\n * Debug flag files will contain \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during\n * our, or the user's build process. Take care when introducing new flags - they must not throw if they are not\n * replaced.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n", "import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n} & { initialized?: boolean };\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  IS_DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`\n  // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be\n  // considered a member of the index the way the actual integrations are\n  addNonEnumerableProperty(integrations, 'initialized', true);\n  return integrations;\n}\n", "/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  DsnComponents,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  Severity,\n  Transport,\n} from '@sentry/types';\nimport {\n  checkOrSetAlreadyCaught,\n  dateTimestampInSeconds,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  normalize,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      IS_DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      IS_DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      IS_DEBUG_BUILD && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      IS_DEBUG_BUILD && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._getBackend().getTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientDoneProcessing(timeout).then(clientFinished => {\n      return this.getTransport()\n        .close(timeout)\n        .then(transportFlushed => clientFinished && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      IS_DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      session.update({\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = resolvedSyncPromise<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (evt) {\n        // TODO this is more of the hack trying to solve https://github.com/getsentry/sentry-javascript/issues/2809\n        // it is only attached as extra data to the event if the event somehow skips being normalized\n        evt.sdkProcessingMetadata = {\n          ...evt.sdkProcessingMetadata,\n          normalizeDepth: `${normalize(normalizeDepth)} (${typeof normalizeDepth})`,\n        };\n      }\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth, maxBreadth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth, maxBreadth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth, maxBreadth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth, maxBreadth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    normalized.sdkProcessingMetadata = { ...normalized.sdkProcessingMetadata, baseClientNormalized: true };\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        IS_DEBUG_BUILD && logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n    const transport = this.getTransport();\n\n    type RecordLostEvent = NonNullable<Transport['recordLostEvent']>;\n    type RecordLostEventParams = Parameters<RecordLostEvent>;\n\n    function recordLostEvent(outcome: RecordLostEventParams[0], category: RecordLostEventParams[1]): void {\n      if (transport.recordLostEvent) {\n        transport.recordLostEvent(outcome, category);\n      }\n    }\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      recordLostEvent('sample_rate', 'event');\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          recordLostEvent('event_processor', event.type || 'event');\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return _ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          recordLostEvent('before_send', event.type || 'event');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n}\n\n/**\n * Verifies that return value of configured `beforeSend` is of expected type.\n */\nfunction _ensureBeforeSendRv(rv: PromiseLike<Event | null> | Event | null): PromiseLike<Event | null> | Event | null {\n  const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n  if (isThenable(rv)) {\n    return rv.then(\n      event => {\n        if (!(isPlainObject(event) || event === null)) {\n          throw new SentryError(nullErr);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`beforeSend rejected with ${e}`);\n      },\n    );\n  } else if (!(isPlainObject(rv) || rv === null)) {\n    throw new SentryError(nullErr);\n  }\n  return rv;\n}\n", "import {\n  Event,\n  EventEnvelope,\n  EventItem,\n  SdkInfo,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\n\nimport { APIDetails, getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: APIDetails): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  api: APIDetails,\n): [SessionEnvelope, SentryRequestType] {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n\n  // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n  const type = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n\n  // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n  const envelopeItem = [{ type } as { type: 'session' | 'sessions' }, session] as SessionItem;\n  const envelope = createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n\n  return [envelope, type];\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: APIDetails): SentryRequest {\n  const [envelope, type] = createSessionEnvelope(session, api);\n  return {\n    body: serializeEnvelope(envelope),\n    type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),\n  };\n}\n\n/**\n * Create an Envelope from an event. Note that this is duplicated from below,\n * but on purpose as this will be refactored in v7.\n */\nexport function createEventEnvelope(event: Event, api: APIDetails): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  const envelopeHeaders = {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n  const eventItem: EventItem = [\n    {\n      type: eventType,\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n    },\n    event,\n  ];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || !!api.tunnel;\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  let body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      const innerErr = newErr as Error;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: { message: innerErr.message, stack: innerErr.stack },\n      });\n    }\n  }\n\n  const req: SentryRequest = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body,\n    type: eventType,\n    url: useEnvelope\n      ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n      : getStoreEndpointWithUrlEncodedAuth(api.dsn),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = {\n      event_id: event.event_id as string,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n    };\n    const eventItem: EventItem = [\n      {\n        type: eventType,\n        sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n      },\n      req.body,\n    ];\n    const envelope = createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n\n  return req;\n}\n", "import { Event, Response, Transport } from '@sentry/types';\nimport { resolvedSyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return resolvedSyncPromise({\n      reason: 'NoopTransport: Event has been skipped because no Dsn is configured.',\n      status: 'skipped',\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return resolvedSyncPromise(true);\n  }\n}\n", "import { Event, EventHint, Options, Session, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { initAPIDetails } from './api';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { createEventEnvelope, createSessionEnvelope } from './request';\nimport { NewTransport } from './transports/base';\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instantiate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates an {@link Event} from primitive inputs to `captureMessage`. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /** Submits the session to Sentry */\n  sendSession(session: Session): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instantiate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** New v7 Transport that is initialized alongside the old one */\n  protected _newTransport?: NewTransport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      IS_DEBUG_BUILD && logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    // TODO(v7): Remove the if-else\n    if (\n      this._newTransport &&\n      this._options.dsn &&\n      this._options._experiments &&\n      this._options._experiments.newTransport\n    ) {\n      const api = initAPIDetails(this._options.dsn, this._options._metadata, this._options.tunnel);\n      const env = createEventEnvelope(event, api);\n      void this._newTransport.send(env).then(null, reason => {\n        IS_DEBUG_BUILD && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      void this._transport.sendEvent(event).then(null, reason => {\n        IS_DEBUG_BUILD && logger.error('Error while sending event:', reason);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): void {\n    if (!this._transport.sendSession) {\n      IS_DEBUG_BUILD && logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    // TODO(v7): Remove the if-else\n    if (\n      this._newTransport &&\n      this._options.dsn &&\n      this._options._experiments &&\n      this._options._experiments.newTransport\n    ) {\n      const api = initAPIDetails(this._options.dsn, this._options._metadata, this._options.tunnel);\n      const [env] = createSessionEnvelope(session, api);\n      void this._newTransport.send(env).then(null, reason => {\n        IS_DEBUG_BUILD && logger.error('Error while sending session:', reason);\n      });\n    } else {\n      void this._transport.sendSession(session).then(null, reason => {\n        IS_DEBUG_BUILD && logger.error('Error while sending session:', reason);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n", "import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    if (IS_DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n", "import { Envelope, EventStatus } from '@sentry/types';\nimport {\n  disabledUntil,\n  eventStatusFromHttpCode,\n  getEnvelopeType,\n  isRateLimited,\n  makePromiseBuffer,\n  PromiseBuffer,\n  RateLimits,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nexport const ERROR_TRANSPORT_CATEGORY = 'error';\n\nexport const TRANSACTION_TRANSPORT_CATEGORY = 'transaction';\n\nexport const ATTACHMENT_TRANSPORT_CATEGORY = 'attachment';\n\nexport const SESSION_TRANSPORT_CATEGORY = 'session';\n\ntype TransportCategory =\n  | typeof ERROR_TRANSPORT_CATEGORY\n  | typeof TRANSACTION_TRANSPORT_CATEGORY\n  | typeof ATTACHMENT_TRANSPORT_CATEGORY\n  | typeof SESSION_TRANSPORT_CATEGORY;\n\nexport type TransportRequest = {\n  body: string;\n  category: TransportCategory;\n};\n\nexport type TransportMakeRequestResponse = {\n  body?: string;\n  headers?: {\n    [key: string]: string | null;\n    'x-sentry-rate-limits': string | null;\n    'retry-after': string | null;\n  };\n  reason?: string;\n  statusCode: number;\n};\n\nexport type TransportResponse = {\n  status: EventStatus;\n  reason?: string;\n};\n\ninterface InternalBaseTransportOptions {\n  bufferSize?: number;\n}\n\nexport interface BaseTransportOptions extends InternalBaseTransportOptions {\n  // url to send the event\n  // transport does not care about dsn specific - client should take care of\n  // parsing and figuring that out\n  url: string;\n}\n\n// TODO: Move into Browser Transport\nexport interface BrowserTransportOptions extends BaseTransportOptions {\n  // options to pass into fetch request\n  fetchParams: Record<string, string>;\n  headers?: Record<string, string>;\n  sendClientReports?: boolean;\n}\n\nexport interface NewTransport {\n  send(request: Envelope): PromiseLike<TransportResponse>;\n  flush(timeout?: number): PromiseLike<boolean>;\n}\n\nexport type TransportRequestExecutor = (request: TransportRequest) => PromiseLike<TransportMakeRequestResponse>;\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates a `NewTransport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<TransportResponse> = makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE),\n): NewTransport {\n  let rateLimits: RateLimits = {};\n\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<TransportResponse> {\n    const envCategory = getEnvelopeType(envelope);\n    const category = envCategory === 'event' ? 'error' : (envCategory as TransportCategory);\n    const request: TransportRequest = {\n      category,\n      body: serializeEnvelope(envelope),\n    };\n\n    // Don't add to buffer if transport is already rate-limited\n    if (isRateLimited(rateLimits, category)) {\n      return rejectedSyncPromise({\n        status: 'rate_limit',\n        reason: getRateLimitReason(rateLimits, category),\n      });\n    }\n\n    const requestTask = (): PromiseLike<TransportResponse> =>\n      makeRequest(request).then(({ body, headers, reason, statusCode }): PromiseLike<TransportResponse> => {\n        const status = eventStatusFromHttpCode(statusCode);\n        if (headers) {\n          rateLimits = updateRateLimits(rateLimits, headers);\n        }\n        if (status === 'success') {\n          return resolvedSyncPromise({ status, reason });\n        }\n        return rejectedSyncPromise({\n          status,\n          reason:\n            reason ||\n            body ||\n            (status === 'rate_limit' ? getRateLimitReason(rateLimits, category) : 'Unknown transport error'),\n        });\n      });\n\n    return buffer.add(requestTask);\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getRateLimitReason(rateLimits: RateLimits, category: TransportCategory): string {\n  return `Too many ${category} requests, backing off until: ${new Date(\n    disabledUntil(rateLimits, category),\n  ).toISOString()}`;\n}\n", "export const SDK_VERSION = '6.19.7';\n", "export { FunctionToString } from './functiontostring';\nexport { InboundFilters } from './inboundfilters';\n", "import { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n      const context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n", "import { Event, EventProcessor, Hub, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (processor: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (hub) {\n        const self = hub.getIntegration(InboundFilters);\n        if (self) {\n          const client = hub.getClient();\n          const clientOptions = client ? client.getOptions() : {};\n          const options = _mergeOptions(self._options, clientOptions);\n          return _shouldDropEvent(event, options) ? null : event;\n        }\n      }\n      return event;\n    });\n  }\n}\n\n/** JSDoc */\nexport function _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [\n      // eslint-disable-next-line deprecation/deprecation\n      ...(internalOptions.whitelistUrls || []),\n      ...(internalOptions.allowUrls || []),\n      // eslint-disable-next-line deprecation/deprecation\n      ...(clientOptions.whitelistUrls || []),\n      ...(clientOptions.allowUrls || []),\n    ],\n    denyUrls: [\n      // eslint-disable-next-line deprecation/deprecation\n      ...(internalOptions.blacklistUrls || []),\n      ...(internalOptions.denyUrls || []),\n      // eslint-disable-next-line deprecation/deprecation\n      ...(clientOptions.blacklistUrls || []),\n      ...(clientOptions.denyUrls || []),\n    ],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...DEFAULT_IGNORE_ERRORS,\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\n/** JSDoc */\nexport function _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    IS_DEBUG_BUILD &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message =>\n    ignoreErrors.some(pattern => isMatchingPattern(message, pattern)),\n  );\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : denyUrls.some(pattern => isMatchingPattern(url, pattern));\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : allowUrls.some(pattern => isMatchingPattern(url, pattern));\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    try {\n      const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n      return [`${value}`, `${type}: ${value}`];\n    } catch (oO) {\n      IS_DEBUG_BUILD && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    if (event.stacktrace) {\n      return _getLastValidUrl(event.stacktrace.frames);\n    }\n    let frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    IS_DEBUG_BUILD && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n", "import { StackFrame } from '@sentry/types';\nimport { StackLineParser, StackLineParserFn } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    // All browser frames are considered in_app\n    in_app: true,\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.*?) ?\\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nconst chrome: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackParser: StackLineParser = [CHROME_PRIORITY, chrome];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex =\n  /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n", "import { Event, EventHint, Exception, Severity, StackFrame } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  createStackParser,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\nimport {\n  chromeStackParser,\n  geckoStackParser,\n  opera10StackParser,\n  opera11StackParser,\n  winjsStackParser,\n} from './stack-parsers';\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromError(ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            isUnhandledRejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(ex: Error & { framesToPop?: number; stacktrace?: string }): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return createStackParser(\n      opera10StackParser,\n      opera11StackParser,\n      chromeStackParser,\n      winjsStackParser,\n      geckoStackParser,\n    )(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(input: string, syntheticException?: Error, attachStacktrace?: boolean): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n", "export { BaseTransport } from './base';\nexport { FetchTransport } from './fetch';\nexport { XHRTransport } from './xhr';\n\nexport { makeNewFetchTransport } from './new-fetch';\nexport { makeNewXHRTransport } from './new-xhr';\n", "/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * Debug flags need to be declared in each package individually and must not be imported across package boundaries,\n * because some build tools have trouble tree-shaking imported guards.\n *\n * As a convention, we define debug flags in a `flags.ts` file in the root of a package's `src` folder.\n *\n * Debug flag files will contain \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during\n * our, or the user's build process. Take care when introducing new flags - they must not throw if they are not\n * replaced.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n", "import { forget, getGlobalObject, isNativeFetch, logger, supportsFetch } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\nconst global = getGlobalObject<Window>();\nlet cachedFetchImpl: FetchImpl;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(global.fetch)) {\n    return (cachedFetchImpl = global.fetch.bind(global));\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      IS_DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(global));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\nexport function sendReport(url: string, body: string): void {\n  const isRealNavigator = Object.prototype.toString.call(global && global.navigator) === '[object Navigator]';\n  const hasSendBeacon = isRealNavigator && typeof global.navigator.sendBeacon === 'function';\n\n  if (hasSendBeacon) {\n    // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    const sendBeacon = global.navigator.sendBeacon.bind(global.navigator);\n    return sendBeacon(url, body);\n  }\n\n  if (supportsFetch()) {\n    const fetch = getNativeFetchImplementation();\n    return forget(\n      fetch(url, {\n        body,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n      }),\n    );\n  }\n}\n", "import {\n  APIDetails,\n  eventToSentryRequest,\n  getEnvelopeEndpointWithUrlEncodedAuth,\n  getStoreEndpointWithUrlEncodedAuth,\n  initAPIDetails,\n  sessionToSentryRequest,\n} from '@sentry/core';\nimport {\n  ClientReport,\n  Event,\n  Outcome,\n  Response as SentryResponse,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport {\n  createClientReportEnvelope,\n  disabledUntil,\n  dsnToString,\n  eventStatusFromHttpCode,\n  getGlobalObject,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  PromiseBuffer,\n  RateLimits,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { sendReport } from './utils';\n\nfunction requestTypeToCategory(ty: SentryRequestType): string {\n  const tyStr = ty as string;\n  return tyStr === 'event' ? 'error' : tyStr;\n}\n\nconst global = getGlobalObject<Window>();\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: APIDetails;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<SentryResponse> = makePromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected _rateLimits: RateLimits = {};\n\n  protected _outcomes: { [key: string]: number } = {};\n\n  public constructor(public options: TransportOptions) {\n    this._api = initAPIDetails(options.dsn, options._metadata, options.tunnel);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = getStoreEndpointWithUrlEncodedAuth(this._api.dsn);\n\n    if (this.options.sendClientReports && global.document) {\n      global.document.addEventListener('visibilitychange', () => {\n        if (global.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<SentryResponse> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<SentryResponse> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordLostEvent(reason: Outcome, category: SentryRequestType): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n    // We want to track each category (event, transaction, session) separately\n    // but still keep the distinction between different type of outcomes.\n    // We could use nested maps, but it's much easier to read and type this way.\n    // A correct type for map-based implementation if we want to go that route\n    // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n    const key = `${requestTypeToCategory(category)}:${reason}`;\n    IS_DEBUG_BUILD && logger.log(`Adding outcome: ${key}`);\n    this._outcomes[key] = (this._outcomes[key] ?? 0) + 1;\n  }\n\n  /**\n   * Send outcomes as an envelope\n   */\n  protected _flushOutcomes(): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n\n    // Nothing to send\n    if (!Object.keys(outcomes).length) {\n      IS_DEBUG_BUILD && logger.log('No outcomes to flush');\n      return;\n    }\n\n    IS_DEBUG_BUILD && logger.log(`Flushing outcomes:\\n${JSON.stringify(outcomes, null, 2)}`);\n\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(this._api.dsn, this._api.tunnel);\n\n    const discardedEvents = Object.keys(outcomes).map(key => {\n      const [category, reason] = key.split(':');\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n      // TODO: Improve types on discarded_events to get rid of cast\n    }) as ClientReport['discarded_events'];\n    const envelope = createClientReportEnvelope(discardedEvents, this._api.tunnel && dsnToString(this._api.dsn));\n\n    try {\n      sendReport(url, serializeEnvelope(envelope));\n    } catch (e) {\n      IS_DEBUG_BUILD && logger.error(e);\n    }\n  }\n\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  protected _handleResponse({\n    requestType,\n    response,\n    headers,\n    resolve,\n    reject,\n  }: {\n    requestType: SentryRequestType;\n    response: Response | XMLHttpRequest;\n    headers: Record<string, string | null>;\n    resolve: (value?: SentryResponse | PromiseLike<SentryResponse> | null | undefined) => void;\n    reject: (reason?: unknown) => void;\n  }): void {\n    const status = eventStatusFromHttpCode(response.status);\n\n    this._rateLimits = updateRateLimits(this._rateLimits, headers);\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(requestType)) {\n      IS_DEBUG_BUILD &&\n        // eslint-disable-next-line deprecation/deprecation\n        logger.warn(`Too many ${requestType} requests, backing off until: ${this._disabledUntil(requestType)}`);\n    }\n\n    if (status === 'success') {\n      resolve({ status });\n      return;\n    }\n\n    reject(response);\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   *\n   * @deprecated Please use `disabledUntil` from @sentry/utils\n   */\n  protected _disabledUntil(requestType: SentryRequestType): Date {\n    const category = requestTypeToCategory(requestType);\n    return new Date(disabledUntil(this._rateLimits, category));\n  }\n\n  /**\n   * Checks if a category is rate limited\n   *\n   * @deprecated Please use `isRateLimited` from @sentry/utils\n   */\n  protected _isRateLimited(requestType: SentryRequestType): boolean {\n    const category = requestTypeToCategory(requestType);\n    return isRateLimited(this._rateLimits, category);\n  }\n\n  protected abstract _sendRequest(\n    sentryRequest: SentryRequest,\n    originalPayload: Event | Session,\n  ): PromiseLike<SentryResponse>;\n}\n", "import { Event, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  public constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  protected _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n      // (see https://caniuse.com/#feat=referrer-policy),\n      // it doesn't. And it throws an exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            void this._fetch(sentryRequest.url, options)\n              .then(response => {\n                const headers = {\n                  'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n                  'retry-after': response.headers.get('Retry-After'),\n                };\n                this._handleResponse({\n                  requestType: sentryRequest.type,\n                  response,\n                  headers,\n                  resolve,\n                  reject,\n                });\n              })\n              .catch(reject);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent('queue_overflow', sentryRequest.type);\n        } else {\n          this.recordLostEvent('network_error', sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n", "import { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { SentryError, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  protected _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent('ratelimit_backoff', sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        // eslint-disable-next-line deprecation/deprecation\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            const request = new XMLHttpRequest();\n\n            request.onreadystatechange = (): void => {\n              if (request.readyState === 4) {\n                const headers = {\n                  'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n                  'retry-after': request.getResponseHeader('Retry-After'),\n                };\n                this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n              }\n            };\n\n            request.open('POST', sentryRequest.url);\n            for (const header in this.options.headers) {\n              if (Object.prototype.hasOwnProperty.call(this.options.headers, header)) {\n                request.setRequestHeader(header, this.options.headers[header]);\n              }\n            }\n            request.send(sentryRequest.body);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent('queue_overflow', sentryRequest.type);\n        } else {\n          this.recordLostEvent('network_error', sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n", "import {\n  BaseTransportOptions,\n  createTransport,\n  NewTransport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n} from '@sentry/core';\n\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\nexport interface FetchTransportOptions extends BaseTransportOptions {\n  requestOptions?: RequestInit;\n}\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeNewFetchTransport(\n  options: FetchTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): NewTransport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      ...options.requestOptions,\n    };\n\n    return nativeFetch(options.url, requestOptions).then(response => {\n      return response.text().then(body => ({\n        body,\n        headers: {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After'),\n        },\n        reason: response.statusText,\n        statusCode: response.status,\n      }));\n    });\n  }\n\n  return createTransport({ bufferSize: options.bufferSize }, makeRequest);\n}\n", "import {\n  BaseTransportOptions,\n  createTransport,\n  NewTransport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n} from '@sentry/core';\nimport { SyncPromise } from '@sentry/utils';\n\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\nconst XHR_READYSTATE_DONE = 4;\n\nexport interface XHRTransportOptions extends BaseTransportOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\nexport function makeNewXHRTransport(options: XHRTransportOptions): NewTransport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    return new SyncPromise<TransportMakeRequestResponse>((resolve, _reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = (): void => {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          const response = {\n            body: xhr.response,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After'),\n            },\n            reason: xhr.statusText,\n            statusCode: xhr.status,\n          };\n          resolve(response);\n        }\n      };\n\n      xhr.open('POST', options.url);\n\n      for (const header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n\n      xhr.send(request.body);\n    });\n  }\n\n  return createTransport({ bufferSize: options.bufferSize }, makeRequest);\n}\n", "import { BaseBackend, getEnvelopeEndpointWithUrlEncodedAuth, initAPIDetails } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport, TransportOptions } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, makeNewFetchTransport, makeNewXHRTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(exception, hint, this._options.attachStacktrace);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions: TransportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      tunnel: this._options.tunnel,\n      sendClientReports: this._options.sendClientReports,\n      _metadata: this._options._metadata,\n    };\n\n    const api = initAPIDetails(transportOptions.dsn, transportOptions._metadata, transportOptions.tunnel);\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel);\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      const requestOptions: RequestInit = { ...transportOptions.fetchParameters };\n      this._newTransport = makeNewFetchTransport({ requestOptions, url });\n      return new FetchTransport(transportOptions);\n    }\n\n    this._newTransport = makeNewXHRTransport({\n      url,\n      headers: transportOptions.headers,\n    });\n    return new XHRTransport(transportOptions);\n  }\n}\n", "import { captureException, getReportDialogEndpoint, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getGlobalObject,\n  getOriginalFunction,\n  logger,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\nconst global = getGlobalObject<Window>();\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function (this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!global.document) {\n    return;\n  }\n\n  if (!options.eventId) {\n    IS_DEBUG_BUILD && logger.error('Missing eventId option in showReportDialog call');\n    return;\n  }\n\n  if (!options.dsn) {\n    IS_DEBUG_BUILD && logger.error('Missing dsn option in showReportDialog call');\n    return;\n  }\n\n  const script = global.document.createElement('script');\n  script.async = true;\n  script.src = getReportDialogEndpoint(options.dsn, options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = global.document.head || global.document.body;\n\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  }\n}\n", "export { GlobalHandlers } from './globalhandlers';\nexport { TryCatch } from './trycatch';\nexport { Breadcrumbs } from './breadcrumbs';\nexport { LinkedErrors } from './linkederrors';\nexport { UserAgent } from './useragent';\nexport { Dedupe } from './dedupe';\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(error, undefined, attachStacktrace, true);\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  IS_DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndAttachStacktrace(): [Hub, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}\n", "import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject, getOriginalFunction } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', _wrapTimeFunction);\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', _wrapTimeFunction);\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', _wrapRAF);\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n    }\n\n    const eventTargetOption = this._options.eventTarget;\n    if (eventTargetOption) {\n      const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(_wrapEventTarget);\n    }\n  }\n}\n\n/** JSDoc */\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: true,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: true,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\n/** JSDoc */\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\n/** JSDoc */\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const global = getGlobalObject() as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = global[target] && global[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: () => void): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityFromString,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  const global = getGlobalObject<Window>();\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(global.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n", "import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(key: string, limit: number, event: Event, hint?: EventHint): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(limit: number, error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(error[key]);\n  return _walkErrorTree(limit, error[key], key, [exception, ...stack]);\n}\n", "import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (global.location && global.location.href);\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n", "import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((currentEvent: Event) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            IS_DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  } else if (event.stacktrace) {\n    return event.stacktrace.frames;\n  }\n  return undefined;\n}\n", "import { BaseClient, Scope, SDK_VERSION } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      IS_DEBUG_BUILD && logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n", "import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { Hub } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger, resolvedSyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n  const client = hub.getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  IS_DEBUG_BUILD && logger.warn('Cannot flush events. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  IS_DEBUG_BUILD && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return resolvedSyncPromise(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\nfunction startSessionOnHub(hub: Hub): void {\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    IS_DEBUG_BUILD && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (!hub.captureSession) {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSessionOnHub(hub);\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler('history', ({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (!(from === undefined || from === to)) {\n      startSessionOnHub(getCurrentHub());\n    }\n  });\n}\n", "// TODO: Remove in the next major release and rely only on @sentry/core SDK_VERSION and SdkInfo metadata\nexport const SDK_NAME = 'sentry.javascript.browser';\n", "export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n"],
  "mappings": "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",
  "names": ["API", "integrations", "defaultIntegrations", "BaseClient", "NoopTransport", "BaseBackend", "flush", "FunctionToString", "InboundFilters", "addGlobalEventProcessor", "getCurrentHub", "IS_DEBUG_BUILD", "IS_DEBUG_BUILD", "global", "BaseTransport", "IS_DEBUG_BUILD", "FetchTransport", "XHRTransport", "BrowserBackend", "global", "IS_DEBUG_BUILD", "integrations_exports", "GlobalHandlers", "IS_DEBUG_BUILD", "TryCatch", "global", "global", "Breadcrumbs", "global", "LinkedErrors", "global", "UserAgent", "Dedupe", "addGlobalEventProcessor", "getCurrentHub", "_shouldDropEvent", "IS_DEBUG_BUILD", "_shouldDropEvent", "BrowserClient", "IS_DEBUG_BUILD", "IS_DEBUG_BUILD", "wrap", "integrations_exports"]
}
