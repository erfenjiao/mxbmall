{"remainingRequest":"/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/babel-loader/lib/index.js!/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/src/components/VueImageVerify.vue?vue&type=template&id=1d03f37e","dependencies":[{"path":"/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/src/components/VueImageVerify.vue","mtime":1671008419639},{"path":"/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/babel.config.js","mtime":1671008419639},{"path":"/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jayB9IGZyb20gInZ1ZSI7CmNvbnN0IF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJpbWctdmVyaWZ5Igp9Owpjb25zdCBfaG9pc3RlZF8yID0gWyJ3aWR0aCIsICJoZWlnaHQiXTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiY2FudmFzIiwgewogICAgcmVmOiAidmVyaWZ5IiwKICAgIHdpZHRoOiBfY3R4LndpZHRoLAogICAgaGVpZ2h0OiBfY3R4LmhlaWdodCwKICAgIG9uQ2xpY2s6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gKC4uLmFyZ3MpID0+ICRzZXR1cC5oYW5kbGVEcmF3ICYmICRzZXR1cC5oYW5kbGVEcmF3KC4uLmFyZ3MpKQogIH0sIG51bGwsIDggLyogUFJPUFMgKi8sIF9ob2lzdGVkXzIpXSk7Cn0="},{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAY;;;uBAAvBC,oBAEM,OAFNC,UAEM,GADJC,oBAAkF;IAA1EC,GAAG,EAAC,QAAQ;IAAEC,KAAK,EAAEC,UAAK;IAAGC,MAAM,EAAED,WAAM;IAAGE,OAAK,yCAAEC,+CAAU","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","ref","width","_ctx","height","onClick","$setup"],"sourceRoot":"","sources":["/home/erfenjiao/mxbmall/newbee-mall-vue3-app-main/src/components/VueImageVerify.vue"],"sourcesContent":["<template>\n  <div class=\"img-verify\">\n    <canvas ref=\"verify\" :width=\"width\" :height=\"height\" @click=\"handleDraw\"></canvas>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\nimport { reactive, onMounted, ref, toRefs } from 'vue'\nexport default {\n  setup() {\n    const verify = ref(null)\n    const state = reactive({\n      pool: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', // 字符串\n      width: 120,\n      height: 40,\n      imgCode: ''\n    })\n    onMounted(() => {\n      // 初始化绘制图片验证码\n      state.imgCode = draw()\n    })\n    \n    // 点击图片重新绘制\n    const handleDraw = () => {\n      state.imgCode = draw()\n    }\n\n    // 随机数\n    const randomNum = (min, max) => {\n      return parseInt(Math.random() * (max - min) + min)\n    }\n    // 随机颜色\n    const randomColor = (min, max) => {\n      const r = randomNum(min, max)\n      const g = randomNum(min, max)\n      const b = randomNum(min, max)\n      return `rgb(${r},${g},${b})`\n    }\n\n    // 绘制图片\n    const draw = () => {\n      // 3.填充背景颜色，背景颜色要浅一点\n      const ctx = verify.value.getContext('2d')\n      // 填充颜色\n      ctx.fillStyle = randomColor(180, 230)\n      // 填充的位置\n      ctx.fillRect(0, 0, state.width, state.height)\n      // 定义paramText\n      let imgCode = ''\n      // 4.随机产生字符串，并且随机旋转\n      for (let i = 0; i < 4; i++) {\n        // 随机的四个字\n        const text = state.pool[randomNum(0, state.pool.length)]\n        imgCode += text\n        // 随机的字体大小\n        const fontSize = randomNum(18, 40)\n        // 字体随机的旋转角度\n        const deg = randomNum(-30, 30)\n        /*\n         * 绘制文字并让四个文字在不同的位置显示的思路 :\n         * 1、定义字体\n         * 2、定义对齐方式\n         * 3、填充不同的颜色\n         * 4、保存当前的状态（以防止以上的状态受影响）\n         * 5、平移translate()\n         * 6、旋转 rotate()\n         * 7、填充文字\n         * 8、restore出栈\n         * */\n        ctx.font = fontSize + 'px Simhei'\n        ctx.textBaseline = 'top'\n        ctx.fillStyle = randomColor(80, 150)\n        /*\n         * save() 方法把当前状态的一份拷贝压入到一个保存图像状态的栈中。\n         * 这就允许您临时地改变图像状态，\n         * 然后，通过调用 restore() 来恢复以前的值。\n         * save是入栈，restore是出栈。\n         * 用来保存Canvas的状态。save之后，可以调用Canvas的平移、放缩、旋转、错切、裁剪等操作。 restore：用来恢复Canvas之前保存的状态。防止save后对Canvas执行的操作对后续的绘制有影响。\n         *\n         * */\n        ctx.save()\n        ctx.translate(30 * i + 15, 15)\n        ctx.rotate((deg * Math.PI) / 180)\n        // fillText() 方法在画布上绘制填色的文本。文本的默认颜色是黑色。\n        // 请使用 font 属性来定义字体和字号，并使用 fillStyle 属性以另一种颜色/渐变来渲染文本。\n        // context.fillText(text,x,y,maxWidth);\n        ctx.fillText(text, -15 + 5, -15)\n        ctx.restore()\n      }\n      // 5.随机产生5条干扰线,干扰线的颜色要浅一点\n      for (let i = 0; i < 5; i++) {\n        ctx.beginPath()\n        ctx.moveTo(randomNum(0, state.width), randomNum(0, state.height))\n        ctx.lineTo(randomNum(0, state.width), randomNum(0, state.height))\n        ctx.strokeStyle = randomColor(180, 230)\n        ctx.closePath()\n        ctx.stroke()\n      }\n      // 6.随机产生40个干扰的小点\n      for (let i = 0; i < 40; i++) {\n        ctx.beginPath()\n        ctx.arc(randomNum(0, state.width), randomNum(0, state.height), 1, 0, 2 * Math.PI)\n        ctx.closePath()\n        ctx.fillStyle = randomColor(150, 200)\n        ctx.fill()\n      }\n      return imgCode\n    }\n\n    return {\n      ...toRefs(state),\n      verify,\n      handleDraw\n    }\n  }\n}\n</script>\n<style type=\"text/css\">\n.img-verify canvas {\n  cursor: pointer;\n}\n</style>"]}]}